{
  "name": "simple-get-json",
  "version": "8.2.0",
  "main": "dist/index-polyglot.cjs",
  "module": "dist/index-es.js",
  "browser": "dist/index.js",
  "type": "module",
  "exports": {
    "import": "./dist/index-polyglot.mjs",
    "require": "./dist/index-polyglot.cjs",
    "browser": "./dist/index.js"
  },
  "author": "Brett Zamir",
  "contributors": [],
  "license": "MIT",
  "description": "getJSON function similar to that of jQuery's for Node or the browser",
  "browserslist": [
    "cover 100%"
  ],
  "c8": {
    "reporter": [
      "json-summary",
      "text"
    ]
  },
  "engines": {
    "node": ">=0.12.0"
  },
  "dependencies": {
    "local-xmlhttprequest": "^2.0.0",
    "node-fetch": "^3.2.3"
  },
  "devDependencies": {
    "@babel/core": "^7.17.8",
    "@babel/eslint-parser": "^7.17.0",
    "@babel/preset-env": "^7.16.11",
    "@babel/register": "^7.17.7",
    "@brettz9/eslint-plugin": "^1.0.4",
    "@rollup/plugin-babel": "^5.3.1",
    "babel-plugin-dynamic-import-node": "^2.3.3",
    "babel-plugin-transform-async-to-promises": "^0.8.18",
    "babel-plugin-transform-import-meta": "^2.1.1",
    "c8": "^7.11.0",
    "chai": "^4.3.6",
    "coveradge": "^0.7.0",
    "eslint": "^8.12.0",
    "eslint-config-ash-nazg": "^32.7.1",
    "eslint-config-standard": "^16.0.3",
    "eslint-formatter-badger": "^0.10.0",
    "eslint-plugin-array-func": "^3.1.7",
    "eslint-plugin-compat": "^4.0.2",
    "eslint-plugin-eslint-comments": "^3.2.0",
    "eslint-plugin-html": "^6.2.0",
    "eslint-plugin-import": "^2.25.4",
    "eslint-plugin-jsdoc": "^38.1.6",
    "eslint-plugin-markdown": "^2.2.1",
    "eslint-plugin-no-unsanitized": "^4.0.1",
    "eslint-plugin-no-use-extend-native": "^0.5.0",
    "eslint-plugin-node": "^11.1.0",
    "eslint-plugin-promise": "^6.0.0",
    "eslint-plugin-sonarjs": "^0.13.0",
    "eslint-plugin-standard": "^4.1.0",
    "eslint-plugin-unicorn": "^42.0.0",
    "filesize-badger": "^0.4.0",
    "http-server": "^14.1.0",
    "license-badger": "^0.19.0",
    "mocha": "^9.2.2",
    "mocha-badge-generator": "^0.9.0",
    "mocha-multi-reporters": "^1.5.1",
    "open-cli": "^7.0.1",
    "rollup": "2.70.1",
    "rollup-plugin-async": "^1.2.0",
    "rollup-plugin-filesize": "^9.1.2",
    "rollup-plugin-node-globals": "^1.4.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/brettz9/getJSON.git"
  },
  "bugs": {
    "url": "https://github.com/brettz9/getJSON/issues"
  },
  "homepage": "https://github.com/brettz9/getJSON",
  "keywords": [
    "json"
  ],
  "scripts": {
    "license-badge": "license-badger --corrections --uncategorizedLicenseTemplate \"\\${license} (\\${name} (\\${version}))\" --filteredTypes=nonempty --textTemplate \"License types\n(project, deps, and bundled devDeps)\" --packageJson --production badges/licenses-badge.svg",
    "license-badge-dev": "license-badger --corrections --filteredTypes=nonempty --textTemplate \"License types\n(all devDeps)\" --allDevelopment badges/licenses-badge-dev.svg",
    "license-badges": "npm run license-badge && npm run license-badge-dev",
    "eslint-badge": "eslint-formatter-badger --outputPath badges/eslint-badge.svg --file .",
    "eslint-third-party-badge": "eslint-formatter-badger --mainTemplate=\"ESLint 3rd party light audit (\\${ruleMapCount} rules in \\${numFiles} files)\" --filteredTypes intrusive,vulnerability --ruleMap .eslintRuleTypeMap.json --outputPath badges/eslint-third-party.svg --noEslintInlineConfig --noUseEslintIgnore --noUseEslintrc --eslintConfigPath .eslintrc-3rdparty.cjs `es-file-traverse --file ./src/index.js --file ./src/index-polyglot.js --node`",
    "eslint-badges": "npm run eslint-badge && npm run eslint-third-party-badge",
    "coverage-badge": "coveradge badges/coverage-badge.svg",
    "eslint": "eslint --ext=js,md,html .",
    "start": "static -p 8089",
    "mocha": "rm -Rf node_modules/.cache && c8 mocha --experimental-modules",
    "rollup": "rollup -c",
    "test": "npm run eslint && npm run rollup && npm run mocha && npm run coverage-badge",
    "browser-test": "npm run eslint && npm run rollup && open-cli http://127.0.0.1:8089/test/index.html && npm start"
  },
  "readme": "[![npm](https://img.shields.io/npm/v/simple-get-json.svg)](https://www.npmjs.com/package/simple-get-json)\n[![Dependencies](https://img.shields.io/david/brettz9/getJSON.svg)](https://david-dm.org/brettz9/getJSON)\n[![devDependencies](https://img.shields.io/david/dev/brettz9/getJSON.svg)](https://david-dm.org/brettz9/getJSON?type=dev)\n\n[![eslint badge](https://raw.githubusercontent.com/brettz9/getJSON/master/badges/eslint-badge.svg?sanitize=true)](badges/eslint-badge.svg)\n[![eslint 3rd party badge](https://raw.githubusercontent.com/brettz9/getJSON/master/badges/eslint-third-party.svg?sanitize=true)](badges/eslint-third-party.svg)\n\n[![testing badge](https://raw.githubusercontent.com/brettz9/getJSON/master/badges/tests-badge.svg?sanitize=true)](badges/tests-badge.svg)\n[![coverage badge](https://raw.githubusercontent.com/brettz9/getJSON/master/badges/coverage-badge.svg?sanitize=true)](badges/coverage-badge.svg)\n\n[![Known Vulnerabilities](https://snyk.io/test/github/brettz9/getJSON/badge.svg)](https://snyk.io/test/github/brettz9/getJSON)\n[![Total Alerts](https://img.shields.io/lgtm/alerts/g/brettz9/getJSON.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/brettz9/getJSON/alerts)\n[![Code Quality: Javascript](https://img.shields.io/lgtm/grade/javascript/g/brettz9/getJSON.svg?logo=lgtm&logoWidth=18)](https://lgtm.com/projects/g/brettz9/getJSON/context:javascript)\n\n[![Filesize badge (UMD)](https://raw.githubusercontent.com/brettz9/getJSON/master/badges/filesize-browser-umd.svg?sanitize=true)](badges/filesize-browser-umd.svg)\n[![Filesize badge (ESM)](https://raw.githubusercontent.com/brettz9/getJSON/master/badges/filesize-browser-esm.svg?sanitize=true)](badges/filesize-browser-esm.svg)\n<!--[![License](https://img.shields.io/npm/l/getJSON.svg)](LICENSE-MIT.txt)-->\n[![Licenses badge](https://raw.githubusercontent.com/brettz9/getJSON/master/badges/licenses-badge.svg?sanitize=true)](badges/licenses-badge.svg)\n\n(see also [licenses for dev. deps.](https://raw.githubusercontent.com/brettz9/getJSON/master/badges/licenses-badge-dev.svg?sanitize=true))\n\n[![issuehunt-to-marktext](https://issuehunt.io/static/embed/issuehunt-button-v1.svg)](https://issuehunt.io/r/brettz9/getJSON)\n\n# getJSON\n\ngetJSON function similar to that of jQuery's.\n\nIf no callback or error-back is provided (or when an array of URLs is\nsupplied), a promise will be returned. If an array is provided along with\na callback, that callback will be executed before the promise is resolved.\n\nYou may use the file `index-es.js` to use the ES2017 `await` keyword for\nPromise results, as well as take advantage of ES6 Module import:\n\n```js\n(async () => {\n\ntry {\n  const [urlObj1, urlObj2] = await getJSON([url1, url2]);\n} catch (err) {\n  // Handle errors here\n}\n\n})();\n```\n\n`simple-get-json` also accepts an array of URLs (waiting for all to load):\n\n```js\n(async () => {\nconst [obj1, obj2] = await getJSON([url1, url2]);\n// Do something with \"obj1\" and \"obj2\"\n})();\n```\n\nAlternatively, you can use regular `then` Promises:\n\n```js\ngetJSON([url1, url2]).then(function (objsArr) {\n  // Do something with \"objsArr\" array\n}, function (err) {\n  // Handle any errors here\n  console.log('err', err);\n});\n```\n\nOr use the old callback style.\n\n```js\ngetJSON(url, function (data) {\n  // Do something with \"data\"\n});\n```\n\nAn optional third argument can be provided as an error-back (which will\nbe supplied the error message and originally supplied URL).\n\n## Install\n\n```\nnpm install simple-get-json\n```\n\n## Setup\n\n### Browser\n\n```html\n<!--\nFor older browser support\n<script src=\"node_modules/core-js-bundle/minified.js\"></script>\n-->\n<script src=\"node_modules/simple-get-json/dist/index.js\"></script>\n```\n\n```js\ngetJSON(...args);\n```\n\nor for ESM:\n\n1. Direct use:\n\n```js\nimport {getJSON} from './node_modules/simple-get-json/dist/index-es.js';\n```\n\n2. With a bundler:\n\n```js\nimport {getJSON} from 'simple-get-json';\n```\n\n\n### Node (CJS)\n\n```js\nconst {getJSON} = require('simple-get-json');\n```\n\nSee below for `buildGetJSON` usage.\n\n### Node (ESM)\n\nIn ESM Node, you can:\n\n1. Directly import the module (for use relative to the current working\n    directory):\n\n```js\nimport {getJSON} from 'simple-get-json';\n```\n\n2. Build a version of `getJSON` which works relative to the current file\n    (or some other URL):\n\n```js\nimport {buildGetJSON} from 'simple-get-json';\n\nconst getJSON = buildGetJSON({\n  baseURL: import.meta.url\n});\n```\n\nOR:\n\n3. Build a version of `getJSON` which works relative to a specific file\n    directory:\n\n```js\nimport {buildGetJSON} from 'simple-get-json';\n\nconst getJSON = buildGetJSON({\n  cwd: '/some/current/working/directory'\n});\n```\n\n## Todo\n\n- Support named parameters ala jQuery\n- Support rest of jQuery API\n- Make local or URL loading optional for Node\n\n## See also\n\n- [postJSON](https://github.com/brettz9/postJSON)\n"
}